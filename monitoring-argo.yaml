apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  # annotations:
    # kubectl.kubernetes.io/last-applied-configuration: |
      # {"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"finalizers":["resources-finalizer.argocd.argoproj.io"],"labels":{"app.kubernetes.io/managed-by":"pulumi"},"name":"kube-prometheus-stack","namespace":"argocd"},"spec":{"destination":{"namespace":"monitoring","server":"https://kubernetes.default.svc"},"ignoreDifferences":[{"group":"apps","jsonPointers":["/spec/replicas"],"kind":"Deployment"}],"info":[{"name":"url","value":"https://prometheus-community.github.io/helm-charts"}],"project":"default","source":{"chart":"kube-prometheus-stack","helm":{"releaseName":"kube-prometheus-stack","values":"alertmanager:\n  alertmanagerSpec:\n    retention: 168h\n    storage:\n      volumeClaimTemplate:\n        spec:\n          storageClassName: gp2\n          accessModes: [\"ReadWriteOnce\"]\n          resources:\n            requests:\n              storage: 5Gi\n    resources:\n      limits:\n        cpu: 100m\n        memory: 400Mi\n      requests:\n        cpu: 100m\n        memory: 400Mi\ngrafana:\n  resources:\n    limits:\n      cpu: 100m\n      memory: 400Mi\n    requests:\n      cpu: 100m\n      memory: 400Mi\nprometheus:\n  prometheusSpec:\n    retention: 30d\n    retentionSize: 45GB\n    resources:\n      limits:\n        cpu: 250m\n        memory: 1000Mi\n      requests:\n        cpu: 250m\n        memory: 1000Mi\n    storageSpec:\n      volumeClaimTemplate:\n        spec:\n         storageClassName: gp2\n         accessModes: [\"ReadWriteOnce\"]\n         resources:\n           requests:\n             storage: 50Gi"},"repoURL":"https://prometheus-community.github.io/helm-charts","targetRevision":"30.0.0"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true},"syncOptions":["Validate=true","CreateNamespace=true","PrunePropagationPolicy=foreground","PruneLast=true"]}}}
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  labels:
    app.kubernetes.io/managed-by: pulumi
  name: kube-prometheus-stack
  namespace: argocd
spec:
  destination:
    namespace: monitoring
    server: https://kubernetes.default.svc
  ignoreDifferences:
  - group: apps
    jsonPointers:
    - /spec/replicas
    kind: Deployment
  info:
  - name: url
    value: https://prometheus-community.github.io/helm-charts
  project: default
  source:
    chart: kube-prometheus-stack
    helm:
      releaseName: kube-prometheus-stack
      values: |-
        global:
          rbac:
            create: true
        alertmanager:
          enabled: true

          config:
            global:
              resolve_timeout: 1m
              slack_api_url: 'https://hooks.slack.com/services/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'
            inhibit_rules:
              - equal:
                  - namespace
                  - alertname
                source_matchers:
                  - severity = critical
                target_matchers:
                  - severity =~ warning|info
              - equal:
                  - namespace
                  - alertname
                source_matchers:
                  - severity = warning
                target_matchers:
                  - severity = info
              - equal:
                  - namespace
                source_matchers:
                  - alertname = InfoInhibitor
                target_matchers:
                  - severity = info
            receivers:
              - name: 'null'

              - name: 'msteam-warning'
                webhook_configs:
                  - send_resolved: true
                    url: http://prometheus-msteams:2000/alertmanager-warning
              - name: 'msteam-critical'
                webhook_configs:
                  - send_resolved: true
                    url: http://prometheus-msteams:2000/alertmanager-critical
              - name: 'teams-instance-1'
                webhook_configs:
                  - send_resolved: true
                    url: http://rancher-alerting-drivers-prom2teams:8089/teams-instance-1
              - name: 'slack-notifications'
                slack_configs:
                - channel: '#monitoring-instances'
                  send_resolved: true
                  icon_url: https://avatars3.githubusercontent.com/u/3380462
                  title: |-
                    [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}
                    {{- if gt (len .CommonLabels) (len .GroupLabels) -}}
                      {{" "}}(
                      {{- with .CommonLabels.Remove .GroupLabels.Names }}
                        {{- range $index, $label := .SortedPairs -}}
                          {{ if $index }}, {{ end }}
                          {{- $label.Name }}="{{ $label.Value -}}"
                        {{- end }}
                      {{- end -}}
                      )
                    {{- end }}
                  text: >-
                    {{ range .Alerts -}}
                    *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                    *Description:* {{ .Annotations.description }}
                    *Details:*
                      {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                      {{ end }}
                    {{ end }}
            route:
              group_by:
                - namespace
                - job
              group_interval: 30s
              group_wait: 30s
              receiver: 'null'
              repeat_interval: 30s
              routes:
                - matchers:
                    - alertname =~ "InfoInhibitor|Watchdog"
                  receiver: 'null'
                - matchers:
                    - alertname =~ "InfoInhibitor|Watchdog"
                  receiver: 'msteam-warning'
                - matchers:
                    - alertname =~ "InfoInhibitor|Watchdog"
                  receiver: 'msteam-critical'
                - receiver: 'msteam-critical'
                  match:
                    severity: 'critical'
                - receiver: 'msteam-warning'
                  match:
                    severity: 'warning'
                - receiver: 'teams-instance-1'
                  match:
                    severity: 'warning'
            templates:
              - /etc/alertmanager/config/*.tmpl

          ingress:
            enabled: true
            ingressClassName: nginx
            hosts: 
            - alertmanager.techsecom.net
            paths: []
            # - /
            tls: 
            - secretName: alertmanager-general-tls
              hosts:
              - alertmanager.techsecom.net
          alertmanagerSpec:
            replicas: 3
            storage: 
            volumeClaimTemplate:
              spec:
                storageClassName: longhorn
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: 10Gi
                selector: {}
            nodeSelector: {}

        grafana:
          enabled: true

          defaultDashboardsTimezone: utc

          adminPassword: 39djh102932@#d

          rbac:
          ingress:
            enabled: true
            ingressClassName: nginx

            annotations: {}
              # kubernetes.io/ingress.class: nginx
              # kubernetes.io/tls-acme: "true"
            labels: {}
            hosts:
              - grafana.techsecom.net
            path: /
            tls: 
            - secretName: grafana-general-tls
              hosts:
              - grafana.techsecom.net

          sidecar:
            dashboards:
              enabled: true
              label: grafana_dashboard
              labelValue: "1"
              # Allow discovery in all namespaces for dashboards
              searchNamespace: ALL

              ## Annotations for Grafana dashboard configmaps
              ##
              annotations: {}
              multicluster:
                global:
                  enabled: false
                etcd:
                  enabled: false
              provider:
                allowUiUpdates: false
            datasources:
              enabled: true
              httpMethod: POST
              createPrometheusReplicasDatasources: false
              label: grafana_datasource
              labelValue: "1"

        prometheus:
          enabled: true
          ingress:
            enabled: true
            ingressClassName: nginx
            # servicePort: 8081
            hosts:
              - prometheus.techsecom.net
            paths: []
            # - /
            # pathType: ImplementationSpecific
            tls: 
              - secretName: prometheus-general-tls
                hosts:
                  - prometheus.techsecom.net
          prometheusSpec:
            replicas: 3
            storageSpec: 
            volumeClaimTemplate:
              spec:
                storageClassName: longhorn
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: 30Gi
              selector: {}

            ## Using tmpfs volume
            ##
            #  emptyDir:
            #    medium: Memory
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 48.1.2
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - Validate=true
    - CreateNamespace=true
    - PrunePropagationPolicy=foreground
    - PruneLast=true